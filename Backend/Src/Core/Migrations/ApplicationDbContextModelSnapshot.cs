// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.EquipmentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(478),
                            Name = "Персональный ПК"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(485),
                            Name = "Смартфоны"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(487),
                            Name = "Умные часы"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(488),
                            Name = "Умные колонки"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(490),
                            Name = "Беспроводные наушники"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(493),
                            Name = "Проводные наушники наушники"
                        });
                });

            modelBuilder.Entity("Core.Entities.ProblemTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("ProblemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4569),
                            EquipmentTypeId = 1,
                            Name = "Не работает USB порт"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4575),
                            EquipmentTypeId = 1,
                            Name = "Не включается"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4577),
                            EquipmentTypeId = 1,
                            Name = "Другое"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4578),
                            EquipmentTypeId = 2,
                            Name = "Не идёт зарядка"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4580),
                            EquipmentTypeId = 2,
                            Name = "Разбит экран"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4584),
                            EquipmentTypeId = 2,
                            Name = "Другое"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4585),
                            EquipmentTypeId = 3,
                            Name = "Не идёт зарядка"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4586),
                            EquipmentTypeId = 3,
                            Name = "Не работают внешние кнопки"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4588),
                            EquipmentTypeId = 3,
                            Name = "Другое"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4590),
                            EquipmentTypeId = 4,
                            Name = "Не идёт звук из колонки"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4591),
                            EquipmentTypeId = 4,
                            Name = "Не работает Блютуз модуль"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4593),
                            EquipmentTypeId = 4,
                            Name = "Другое"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4594),
                            EquipmentTypeId = 5,
                            Name = "Не идёт звук из наушников"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4596),
                            EquipmentTypeId = 5,
                            Name = "Не работает Блютуз модуль"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4597),
                            EquipmentTypeId = 5,
                            Name = "Другое"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4598),
                            EquipmentTypeId = 6,
                            Name = "Не идёт звук из наушников"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4600),
                            EquipmentTypeId = 6,
                            Name = "Сломан 3.5  мм порт"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 321, DateTimeKind.Utc).AddTicks(4602),
                            EquipmentTypeId = 6,
                            Name = "Другое"
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshSessions");
                });

            modelBuilder.Entity("Core.Entities.RepairRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProblemTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RepairStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("ProblemTypeId");

                    b.HasIndex("RepairStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("RepairRequests");
                });

            modelBuilder.Entity("Core.Entities.RepairStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RepairStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(918),
                            Name = "В ожидание"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(922),
                            Name = "В процессе"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(924),
                            Name = "Выполнена"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(926),
                            Name = "Отменена"
                        });
                });

            modelBuilder.Entity("Core.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(5206),
                            Description = "admin",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 323, DateTimeKind.Utc).AddTicks(5220),
                            Description = "guest",
                            Name = "guest"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("779d694c-82b5-4802-b650-b519a786e64f"),
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 471, DateTimeKind.Utc).AddTicks(5885),
                            Email = "admin@example.com",
                            FirstName = "Имя",
                            IsActive = true,
                            LastName = "Фамилия",
                            MiddleName = "Отчество",
                            PasswordHash = "$2a$11$3t3TjI4gAR9FT6J4WSy0hOS6vahC.REudOasjMHaWsXjsxFnXkszu",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("571cd1c2-db6e-48d6-a76b-4d3ae8c4df07"),
                            CreatedOn = new DateTime(2024, 4, 19, 15, 58, 43, 620, DateTimeKind.Utc).AddTicks(5168),
                            Email = "guest@example.com",
                            FirstName = "Имя",
                            IsActive = true,
                            LastName = "Фамилия",
                            MiddleName = "Отчество",
                            PasswordHash = "$2a$11$CKFOZT/POUwkqG2BcP4ivucbW9oXhqRMjq1WrnvjWzCDOJmNYFZMS",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.ProblemTypeEntity", b =>
                {
                    b.HasOne("Core.Entities.EquipmentTypeEntity", "EquipmentType")
                        .WithMany("ProblemTypes")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("Core.Entities.RefreshSessionEntity", b =>
                {
                    b.HasOne("Core.Entities.UserEntity", "User")
                        .WithMany("RefreshSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RepairRequestEntity", b =>
                {
                    b.HasOne("Core.Entities.EquipmentTypeEntity", "EquipmentType")
                        .WithMany("RepairRequests")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProblemTypeEntity", "ProblemType")
                        .WithMany("RepairRequests")
                        .HasForeignKey("ProblemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.RepairStatusEntity", "RepairStatus")
                        .WithMany("RepairRequests")
                        .HasForeignKey("RepairStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity", "User")
                        .WithMany("RepairRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");

                    b.Navigation("ProblemType");

                    b.Navigation("RepairStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserEntity", b =>
                {
                    b.HasOne("Core.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.EquipmentTypeEntity", b =>
                {
                    b.Navigation("ProblemTypes");

                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("Core.Entities.ProblemTypeEntity", b =>
                {
                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("Core.Entities.RepairStatusEntity", b =>
                {
                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.UserEntity", b =>
                {
                    b.Navigation("RefreshSessions");

                    b.Navigation("RepairRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
